That’s fantastic progress! A hands-on project will be an excellent way to reinforce your skills. Here’s a small project idea that covers user and group management, file permissions, and practical Linux commands.

### Project: Linux Multi-User System Setup for a Small Team

**Objective**: Set up a multi-user environment with different user roles and access levels. This will simulate a small team working in different departments, with specific permissions for accessing project directories and files.

---

#### 1. **Create the Users and Groups**
   - **Scenario**: Create three departments: `devteam`, `designteam`, and `marketing`.
   - **Step**: Create three groups with these names.

   ```bash
   sudo groupadd devteam
   sudo groupadd designteam
   sudo groupadd marketing
   ```

   - **Add Users**: Add users for each department (e.g., `devuser1`, `designuser1`, `marketer1`). Add each user to their respective group.

   ```bash
   sudo useradd -m -G devteam devuser1
   sudo useradd -m -G designteam designuser1
   sudo useradd -m -G marketing marketer1
   ```

   - **Bonus**: Add a user (e.g., `adminuser`) with permissions to access all groups.

   ```bash
   sudo useradd -m -G devteam,designteam,marketing adminuser
   ```

#### 2. **Set Up Project Directories**
   - **Scenario**: Each department has its own project directory, which only members of that department can access. A shared directory will be accessible by all teams.
   
   ```bash
   sudo mkdir /projects/devteam
   sudo mkdir /projects/designteam
   sudo mkdir /projects/marketing
   sudo mkdir /projects/shared
   ```

   - **Set Group Ownership**: Assign each directory to its corresponding group.

   ```bash
   sudo chown :devteam /projects/devteam
   sudo chown :designteam /projects/designteam
   sudo chown :marketing /projects/marketing
   sudo chown :devteam /projects/shared  # Or choose another group, like "admin"
   ```

#### 3. **Set Directory Permissions**
   - **Requirement**: Each team’s project directory should be accessible only to that team. The `shared` directory should be readable and writable by all.

   ```bash
   sudo chmod 770 /projects/devteam
   sudo chmod 770 /projects/designteam
   sudo chmod 770 /projects/marketing
   sudo chmod 775 /projects/shared
   ```

   - **Test Permissions**: Use `su - username` to switch to each user and check that permissions work as expected. For example:
   
   ```bash
   su - devuser1
   ls /projects/devteam      # Should succeed
   ls /projects/designteam    # Should fail
   ```

#### 4. **Change and Manage User Roles**
   - **Simulate Role Changes**: Change a user’s group to simulate a role change. For example, move `devuser1` to `designteam` and remove them from `devteam`.

   ```bash
   sudo usermod -G designteam devuser1
   ```

   - **Check Results**: Confirm by listing permissions as `devuser1` to ensure the change worked.

#### 5. **Add Extra Permissions**
   - **Scenario**: Give `adminuser` elevated permissions, like full access to all directories and the ability to create files in any team’s project directory.

   ```bash
   sudo usermod -aG devteam,designteam,marketing adminuser
   ```

#### 6. **Cleanup**
   - **Delete Unused Groups and Users**: Practice deleting users and groups that are no longer needed. Remove directories and verify the permissions are updated correctly.

   ```bash
   sudo deluser devuser1 devteam
   sudo groupdel designteam
   sudo rm -rf /projects/designteam
   ```

---

### Final Task: Document the Project
After completing these steps, create a document explaining each command you used, why it was necessary, and what the expected outcome was. This will not only cement your understanding but also serve as a useful reference for the future. 

Let me know if you'd like further guidance on any part!