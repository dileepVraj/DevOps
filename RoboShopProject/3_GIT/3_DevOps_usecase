### Use Case of Git and GitHub in DevOps  

In the **DevOps lifecycle**, **Git** and **GitHub** are critical tools for **source code management** and **collaboration** between development and operations teams. Here’s how they are used practically:

---

### **1. Version Control of Code and Infrastructure**
- **Scenario**: You’re working on an application where multiple developers are contributing to different features.
- **Git Use**: 
  - Developers use Git locally to track changes in their code, create branches for new features, and resolve conflicts during merges.
  - Example:
    ```bash
    git branch feature-login
    git checkout feature-login
    git add login.html
    git commit -m "Added login page"
    ```
- **GitHub Use**: 
  - Teams push their branches to GitHub, where it serves as a **central repository**.
  - Example:
    ```bash
    git push origin feature-login
    ```

---

### **2. Collaboration and Pull Requests**
- **Scenario**: Developers and DevOps engineers collaborate to add CI/CD pipelines.
- **GitHub Use**: 
  - Developers create **pull requests** to propose changes and get them reviewed by the team.
  - Example:
    - A developer adds a Dockerfile for containerization and creates a pull request for DevOps engineers to integrate it with the CI pipeline.

---

### **3. Infrastructure as Code (IaC)**
- **Scenario**: DevOps engineers manage infrastructure using **Terraform** or **Ansible** scripts stored in a Git repository.
- **Git Use**:
  - Track changes to infrastructure code, ensuring every change is logged.
  - Example:
    ```bash
    git commit -m "Updated Terraform file to add an EC2 instance"
    ```
- **GitHub Use**:
  - Store and version infrastructure code in a centralized repository to facilitate collaboration and rollbacks if needed.
  - Automate infrastructure deployment using **GitHub Actions**.

---

### **4. Continuous Integration/Continuous Deployment (CI/CD)**
- **Scenario**: Automate the testing and deployment process.
- **GitHub Use**:
  - Use **GitHub Actions** or integrate with tools like **Jenkins** to trigger builds and deployments whenever a new code commit is pushed.
  - Example:
    - A `main` branch push triggers:
      1. Unit tests.
      2. Building a Docker image.
      3. Deployment to a staging environment.
  - YAML file for GitHub Actions:
    ```yaml
    name: CI/CD Pipeline
    on:
      push:
        branches:
          - main
    jobs:
      build:
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v2
          - name: Run Tests
            run: npm test
    ```

---

### **5. Disaster Recovery and Rollbacks**
- **Scenario**: A recent deployment introduced bugs, and you need to revert to a stable version.
- **Git Use**:
  - Roll back to a previous commit using Git locally.
  - Example:
    ```bash
    git revert HEAD
    ```
- **GitHub Use**:
  - Pull stable code from GitHub or switch to an earlier release tag for recovery.
  - Example:
    ```bash
    git checkout tags/v1.0
    ```

---

### **6. Audit and Compliance**
- **Scenario**: Track changes to ensure compliance with security standards.
- **GitHub Use**:
  - Use GitHub's **history** and **blame features** to see who made changes and when.
  - Example:
    - The security team reviews the audit logs in the repository to ensure no unauthorized changes were made.

---

### **Real-Time Example**
1. **Application Development**:  
   A team of developers builds a microservices-based application. Each service has its own GitHub repository. DevOps engineers create CI/CD pipelines using GitHub Actions for automatic testing and deployment.

2. **Infrastructure Management**:  
   Infrastructure is defined using Terraform stored in a GitHub repository. Updates to the Terraform scripts trigger GitHub Actions to apply the changes to the cloud.

---

### Key Takeaway:
- **Git**: Used for local version control and development.
- **GitHub**: Used for collaboration, CI/CD integration, and centralized repository management.  
Together, they form the backbone of **modern DevOps workflows**.