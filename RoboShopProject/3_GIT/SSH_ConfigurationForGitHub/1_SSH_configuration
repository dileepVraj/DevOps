To configure SSH for GitHub, follow these steps:

---

### **1. Generate an SSH Key Pair**
1. Open a terminal or command prompt.
2. Run the command:
   ```bash
   ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
   ```
   - Replace `"your_email@example.com"` with the email address associated with your GitHub account.
   - Press **Enter** to save the key in the default location (`~/.ssh/id_rsa` or equivalent for your OS).
   - If prompted, enter a passphrase (optional but recommended for security).

---

### **2. Add Your SSH Key to the SSH Agent**
1. Start the SSH agent:
   - On Linux/macOS:
     ```bash
     eval "$(ssh-agent -s)"
     ```
   - On Windows (Git Bash):
     ```bash
     eval `ssh-agent -s`
     ```
2. Add your private key to the SSH agent:
   ```bash
   ssh-add ~/.ssh/id_rsa
   ```

---

### **3. Add the SSH Public Key to GitHub**
1. Copy your public key:
   ```bash
   cat ~/.ssh/id_rsa.pub
   ```
   Or use:
   ```bash
   clip < ~/.ssh/id_rsa.pub
   ```
   (On Windows, this copies the key to your clipboard.)
2. Go to [GitHub Settings → SSH and GPG keys](https://github.com/settings/keys).
3. Click **New SSH Key**, provide a title, and paste your public key.
4. Click **Add SSH Key**.

---

### **4. Configure SSH for GitHub**
1. Edit or create the SSH configuration file:
   ```bash
   nano ~/.ssh/config
   ```
2. Add the following configuration:
   ```plaintext
   Host github.com
       HostName github.com
       User git
       PreferredAuthentications publickey
       IdentityFile ~/.ssh/id_rsa
   ```
   - Replace `~/.ssh/id_rsa` with the path to your private key if it’s not the default.

---

### **5. Test the SSH Connection**
1. Run:
   ```bash
   ssh -T git@github.com
   ```
2. If successful, you’ll see:
   ```plaintext
   Hi <username>! You've successfully authenticated, but GitHub does not provide shell access.
   ```

---

### **6. Use SSH for Git Operations**
1. Update your Git remote URL to use SSH:
   ```bash
   git remote set-url origin git@github.com:<username>/<repository>.git
   ```
2. Now you can push, pull, and clone repositories securely using SSH.

---

This setup is useful for:
- Avoiding password prompts every time you interact with a GitHub repository.
- Enhancing security by using key-based authentication.